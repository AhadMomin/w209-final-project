# -*- coding: utf-8 -*-
"""otd_utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OrZz3hIfxODXM04yyW2o7BTJVFzmmMqm

## Imports & Inits
"""

# Assume altair-5 is already installed. If not, run this command:
#   !pip install altair==5

import altair as alt
import numpy as np
import pandas as pd
from altair import datum

print(alt.__version__)

"""## Common & Utilities Codes"""

# Define common styles used globally.
global_styles = {
    'chart-color-scheme': 'tableau20',
    'filter-notes': [
        'Select status in any chart to filter.',
        'To select/de-select statuses, click and hold the shift key.',
        'To reset the filter, click inside the chart.',
    ],
}

# Define standard styles for heading.
def title_styles_heading(title=" ", subtitle=[], center=False):
  title = alt.TitleParams(
      text=title,
      subtitle=subtitle + [" "], # Add a blank line.
      fontSize=24,
      fontWeight='bold',
      font='Arial',
      subtitlePadding=10,
      subtitleFontSize=16,
      subtitleFontWeight='bold',
      subtitleFont='Arial',
      subtitleFontStyle='italic',
      align='left',
      anchor='start',
  )
  if (center):
    title.align = 'center'
    title.anchor = 'middle'

  return title

def title_styles_footer(title):
  title = alt.TitleParams(
        [' ', ' ', ' '] + title,
        baseline='bottom',
        orient='bottom',
        anchor='start',
        align='left',
        fontWeight='normal',
        fontSize=12,
        fontStyle='italic',
  )

  return title

# Create a selectable bar plot.
def selectable_bar(
    data, sel_cols,
    agg_col, agg_col_title="",
    legend=NotImplementedError,
    horizontal=True,
    title="", subtitle=""):

  # Add aggregated column to the selectable fields.
  agg_col_name = agg_col.split(':') [0]
  sel_cols.append(agg_col_name)

  # Add legend name to the selectable fields.
  legend_name_type = legend['plot'].encoding.y.shorthand
  legend_name = legend_name_type.split(':') [0]
  sel_cols.append(legend_name)

  # Define Selection and Condition.
  selection = alt.selection_point(fields=sel_cols)
  condition = alt.condition(
      # selection,
      alt.LogicalAndPredicate(**{
        'and': [selection, legend['selection']]
      }),
      alt.Color(legend_name_type, legend=None,
                scale=alt.Scale(scheme=global_styles['chart-color-scheme'])),
      alt.value('lightgray')
  )

  # Define aggregated title.
  agg_title = agg_col_name
  if (agg_col_title):
    agg_title = agg_col_title

  # Define x and y axis.
  agg_col_short_hand=f'count({agg_col_name}):Q'
  if (horizontal):
    x_axis=alt.X(agg_col_short_hand, title='Total Orders')
    y_axis=alt.Y(agg_col, sort='-x', title=agg_title)
  else:
    x_axis=alt.X(agg_col, sort='-y', title=agg_title)
    y_axis=alt.Y(agg_col_short_hand, title='Total Orders')

  # Plot a bar chart with total orders by the given column.
  chart = alt.Chart(data).mark_bar(
      tooltip=True
  ).encode(
      x=x_axis,
      y=y_axis,
      color=condition
  ).add_params(
      selection,
      legend['selection']
  ).properties(
      title={
        'text': title,
        'subtitle': subtitle
      }
  )

  # Add a text to show the group total.
  text = chart.mark_text(
      align='right',
      baseline='middle',
      dx=-10,
      fill='white'
  ).encode(
      text='Total'
  )

  # Configure the bar chart with standard look and feel.
  # plot = configure_styles((chart + text), 500, 600, title=title, subtitle=subtitle)
  plot = chart

  return {'plot': plot, 'selection': selection, 'condition': condition}

# Create a selectable legend using mark_square.
def selectable_legend(data, category_name):
  # Separate the categary name from the type identifier.
  cat_name_list = category_name.split(':')

  # Define selection and condition.
  selection = alt.selection_point(fields=[cat_name_list[0]])
  condition = alt.condition(
      selection,
      alt.Color(category_name).legend(None),
      alt.value('lightgray')
  )

  # Define options as squares.
  plot = alt.Chart(data).mark_square(size=120).encode(
      alt.Y(category_name).axis(orient='left'),
      color=condition
  ).add_params(
      selection
  )

  return {'plot': plot, 'selection': selection, 'condition': condition}

# Create filter selection controls.
def radio_selection(name, options):
  labels = [option + ' ' for option in options]
  bind_sel = alt.binding_radio(
      name=name,
      options=[None] + options,
      labels=['All'] + labels)
  return alt.selection_point(fields=[name], bind=bind_sel)


def dropdown_selection(name, options):
  labels = [option + ' ' for option in options]
  bind_sel = alt.binding_select(
      name=name,
      options=[None] + options,
      labels=['All'] + labels)
  return alt.selection_point(fields=[name], bind=bind_sel)

def plot_customer_map_points(data, legend):
  legend_name_type = legend['plot'].encoding.y.shorthand

  plot = alt.Chart(data).mark_circle(size=10).encode(
      color=legend_name_type,
      longitude='Customer Longitude:Q',
      latitude='Customer Latitude:Q',
      # size='Delivery Status:N',
      tooltip=['Delivery Status', 'Customer City', 'Customer State', 'Customer Country']
  ).add_params(
      legend['selection'],
      # cust_country_plot['selection'],
      # cust_state_plot['selection']
  ).transform_filter(
      legend['selection']
  # ).transform_filter(
  #     cust_country_plot['selection']
  # ).transform_filter(
  #     cust_state_plot['selection']
  )

  return plot

def plot_shipper_map_points(data, legend):
  legend_name_type = legend['plot'].encoding.y.shorthand

  plot = alt.Chart(data).mark_circle(size=10).encode(
      color=legend_name_type,
      longitude='Order Longitude:Q',
      latitude='Order Latitude:Q',
      # size='Delivery Status:N',
      tooltip=['Delivery Status', 'Order City', 'Order State', 'Order Country']
  ).add_params(
      legend['selection'],
      # cust_country_plot['selection'],
      # cust_state_plot['selection']
  ).transform_filter(
      legend['selection']
  # ).transform_filter(
  #     cust_country_plot['selection']
  # ).transform_filter(
  #     cust_state_plot['selection']
  )

  return plot

"""## Experimental Codes"""

# Configure chat styles.
def configure_styles(
    viz,
    continuousHeight=500, continuousWidth=300,
    title='', subtitle=''):

  viz = viz.configure_view(
      continuousHeight=continuousHeight,
      continuousWidth=continuousWidth,
      strokeWidth=2,
      # fill='#FFEEDD',
      stroke='darkgray'
  ).configure_title(
      fontSize=24,
      fontWeight='bold',
      font='Arial',
      subtitlePadding=10,
      subtitleFontSize=16,
      subtitleFontWeight='bold',
      subtitleFont='Arial',
  ).configure_axis(
      titleFontSize=16,
      titleFontWeight='bold'
  ).configure_legend(
      strokeColor='gray',
      fillColor='#EEEEEE',
      padding=10,
      cornerRadius=10
  ).properties(
      title={
        'text': title,
        'subtitle': subtitle
      }
  )
  return viz

# Configure table caption.
def configure_table_caption(
    data, title):
  styles = [dict(
      selector="caption",
      props=[
          ("text-align", "center"),
          ("font-size", "110%"),
          ("font-weight", "bold"),
          ("color", 'black'),
          ("padding-bottom", '20px'),
      ])
  ]
  return data.style.set_caption(title).set_table_styles(styles)


# Group by the given column and create a percentage bar chart.
def create_grouped_bar_chart(data, column, title, subtitle=""):
  # Group the data frame by the given column.
  grp = data.groupby(column).agg(Total=('Order Id', 'count')).reset_index()

  # Plot a bar chart with total orders by the given column.
  chart = alt.Chart(grp).transform_joinaggregate(
      TotalOrder='sum(Total)',
  ).transform_calculate(
      PercentOfTotal="datum.Total / datum.TotalOrder"
  ).mark_bar().encode(
      x=alt.X('PercentOfTotal:Q', axis=alt.Axis(format='%'), title='Percent of Total'),
      y=alt.Y(column + ':N', sort='-x')
  )

  # Add a text to show the group total.
  text = chart.mark_text(
      align='right',
      baseline='middle',
      dx=-10,
      fill='white'
  ).encode(
      text='Total'
  )

  # Configure the bar chart with standard look and feel.
  return configure_styles((chart + text), 500, 600, title=title, subtitle=subtitle)

# Create a percentage bar chart.
def labeled_pct_bar(data, column, category_name):

  # Plot a bar chart with total orders by the given column.
  chart = alt.Chart(data).transform_joinaggregate(
      TotalOrder='sum(Total)',
  ).transform_calculate(
      PercentOfTotal="datum.Total / datum.TotalOrder"
  ).mark_bar(tooltip=True).encode(
      x=alt.X('PercentOfTotal:Q', axis=alt.Axis(format='%'), title='Percent of Total'),
      y=alt.Y(column, sort='-x'),
      color=category_name,
  )

  # Add a text to show the group total.
  text = chart.mark_text(
      align='right',
      baseline='middle',
      dx=-10,
      fill='white'
  ).encode(
      text='Total'
  )

  return chart

# Experiment: How to add count value inside a 'legend'.

# alt.Chart(agg_df).mark_square(size=120).encode(
#    x=alt.X('Delivery Status:N').axis(orient='top'),
# )
# padding={"left": 5, "top": 5, "right": 5, "bottom": 5}

# r = alt.Chart(agg_df).mark_rect(
#     # width=300,
#     # bandSize=200,
#     # binSpacing=1,
#     # discreteBandSize=10,
#     # dx=50,
#     # dy=100,
#     size=1000,
#     fontWeight=500
# ).encode(
#     alt.Y('Delivery Status:N'),
# )

# t = alt.Chart(agg_df).mark_text(baseline='middle').encode(
#     alt.Text('sum(Total)'),
#     alt.Y('Delivery Status:N'),
#     # color='Delivery Status:N'
# )
# r + t

# r

# Create a selectable bar plot by total percentage.
# This function depends on the dataset to be pre-grouped by the
# aggregated columns. This is to improve the performance.
#
# TODO: Issue: The bar chart display is segmented by individual total.
# (12.01.2023)
def selectable_bar_by_percentage(
    data, sel_cols,
    agg_col, agg_col_title="",
    legend=NotImplementedError,
    horizontal=True,
    title="", subtitle=""):

  # Add aggregated column to the selectable fields.
  agg_col_name = agg_col.split(':') [0]
  sel_cols.append(agg_col_name)

  # Add legend name to the selectable fields.
  legend_name_type = legend['plot'].encoding.y.shorthand
  legend_name = legend_name_type.split(':') [0]
  sel_cols.append(legend_name)

  # Define Selection and Condition.
  selection = alt.selection_point(fields=sel_cols)
  condition = alt.condition(
      # selection,
      alt.LogicalAndPredicate(**{
        'and': [selection, legend['selection']]
      }),
      alt.Color(legend_name_type, legend=None,
                scale=alt.Scale(scheme=global_styles['chart-color-scheme'])),
      alt.value('lightgray')
  )

  # Define aggregated title.
  agg_title = agg_col_name
  if (agg_col_title):
    agg_title = agg_col_title

  # Define x and y axis.
  if (horizontal):
    x_axis=alt.X('PercentOfTotal:Q', axis=alt.Axis(format='%'), title='Percent of Total')
    y_axis=alt.Y(agg_col, sort='-x', title=agg_title)
  else:
    x_axis=alt.X(agg_col, sort='-y', title=agg_title)
    y_axis=alt.Y('PercentOfTotal:Q', axis=alt.Axis(format='%'), title='Percent of Total')

  # Plot a bar chart with total orders by the given column.
  chart = alt.Chart(data).transform_joinaggregate(
      TotalOrder='sum(Total)',
  ).transform_calculate(
      PercentOfTotal="datum.Total / datum.TotalOrder"
  ).mark_bar(tooltip=True).encode(
      x=x_axis,
      y=y_axis,
      color=condition
  ).add_params(
      selection,
      legend['selection']
  ).transform_filter(
      alt.FieldLTPredicate("datum.TotalOrder", 10000)
  ).properties(
      title={
        'text': title,
        'subtitle': subtitle
      }
  )

  # Add a text to show the group total.
  text = chart.mark_text(
      align='right',
      baseline='middle',
      dx=-10,
      fill='white'
  ).encode(
      text='Total'
  )

  # Configure the bar chart with standard look and feel.
  # plot = configure_styles((chart + text), 500, 600, title=title, subtitle=subtitle)
  plot = chart

  return {'plot': plot, 'selection': selection, 'condition': condition}