# -*- coding: utf-8 -*-
"""otd_page1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d9v7qKxRp35WYgdnj7_T2utG9-H0WniJ

## Imports & Inits
"""

# Assume altair-5 is already installed. If not, run this command:
# !pip install altair==5

import altair as alt
import numpy as np
import pandas as pd
import os
import sys
from altair import datum

print(alt.__version__)

# Enable large dataset.
alt.data_transformers.disable_max_rows()

# Setup base dir.
BASE_DIR=os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])),'w209')

# Special setup if this script is running in colab.
IN_COLAB = 'google.colab' in sys.modules
if (IN_COLAB):
  from google.colab import drive
  drive.mount('/content/drive')
  BASE_DIR = '/content/drive/MyDrive/Colab Notebooks/datasci-209/final-project'

# Setup frequently-used directories.
DATA_DIR=os.path.join(BASE_DIR, 'static')
LIB_DIR=os.path.join(BASE_DIR, 'lib')

# Include the lib dir in the module-search path.
sys.path.append(LIB_DIR)

# Import utilities library.
from otd_utils import selectable_legend, selectable_bar, global_styles, title_styles_heading, title_styles_footer

"""## EDA
- Actual EDA works are done in Final-Project_Delivery-Status_EDA notebook.
- Please refer to the details in that notebook.
- The current notebook is only responsible of loading the dataset from the data file created in the EDA notebook.
- This will make the current notebook clean and improve performance.
"""

def load_data():
  # Load aggregation-specific dataset.
  agg_df = pd.read_csv(os.path.join(DATA_DIR,'DataCoSupplyChainDataset_DS_AGG.csv'),encoding='unicode_escape')

  # Uncomment below to inspect the dataframe.
  # pd.set_option('display.max_columns',None)
  # display(agg_df.head())
  # display(agg_df.shape)

  return agg_df

"""## Build Views: Page-1

### Viz-1.1: Shipper View
"""

# Create shipper view.
def create_shipper_view(agg_df, legend):
  # Create Shippers' Market plot WRT Delivery Status.
  market_plot = selectable_bar(
      agg_df, [], 'Market:N', 'Shipper Market', legend)
  # market_plot['plot'] | legend['plot'] # Uncomment to test.

  # Create Shippers' Region plot WRT Delivery Status.
  region_plot = selectable_bar(
      agg_df, ['Market'], 'Order Region:N', 'Shipper Region', legend)

  region_plot['plot'] = region_plot['plot'].transform_filter(
      market_plot['selection']
  )
  # market_plot['plot'] | region_plot['plot'] | legend['plot'] # Uncomment to test.

  # Create Shippers' Country plot WRT Delivery Status.
  country_plot = selectable_bar(
      agg_df, ['Market', 'Order Region'], 'Order Country:N', 'Shipper Country', legend, horizontal=False)

  country_plot['plot'] = country_plot['plot'].add_params(
    market_plot['selection'],
    region_plot['selection'],
  ).transform_filter(
      {
          'and': [market_plot['selection'], region_plot['selection']]
      }
  )
  # (market_plot['plot'] & region_plot['plot']) | (country_plot['plot'] | legend['plot']) # Uncomment to test.

  return market_plot, region_plot, country_plot

"""### Viz-1.2: Customer View"""

# Create customer view.
def create_customer_view(agg_df, legend):
  # Create Customers' Country plot WRT Delivery Status.
  cust_country_plot = selectable_bar(
      agg_df, [], 'Customer Country:N', legend=legend)
  # cust_country_plot['plot'] | legend['plot'] # Uncomment to test.

  # Create Customers' State plot WRT Delivery Status.
  cust_state_plot = selectable_bar(
      agg_df, ['Customer Country'], 'Customer State:N', legend=legend, horizontal=False)

  cust_state_plot['plot'] = cust_state_plot['plot'].transform_filter(
      cust_country_plot['selection']
  )
  # cust_country_plot['plot'] | cust_state_plot['plot'] | legend['plot'] # Uncomment to test.

  return cust_country_plot, cust_state_plot

"""### Page-1: Shipper & Customer View"""

def create_shipper_customer_view(preview=False):
  # Load data.
  agg_df = load_data()

  # Create a common legend.
  legend = selectable_legend(agg_df, 'Delivery Status:N')
  # legend['plot'] # Uncomment to test.

  # Create Shipper View.
  market_plot, region_plot, country_plot = create_shipper_view(agg_df, legend)

  # Create Customer View.
  cust_country_plot, cust_state_plot = create_customer_view(agg_df, legend)

  # Create Main View: Shipper View & Customer View:
  # Initialize first panel - Filters.
  r1_1 = (market_plot['plot'] & cust_country_plot['plot'])
  r1_1 = r1_1.properties(
    title=title_styles_footer(global_styles['filter-notes'])
  )
  r1 = r1_1 | region_plot['plot'] | legend['plot']
  r1 = r1.properties(
      title = title_styles_heading(
          'Total Delivery Status Percentages',
           ['By Shippers & Customers Regions'], center=True)
  )

  # Initialize second panel - Details: Shipper Countries & Customer States.
  styled_country_plot = country_plot['plot'].properties(
      title = title_styles_heading(subtitle=['Shipper Countries'])
  )
  styled_cust_state_plot = cust_state_plot['plot'].properties(
      title = title_styles_heading(subtitle=['Customer States'])
  )
  r2 = (styled_country_plot & styled_cust_state_plot)
  r2 = r2.properties(
      title = title_styles_heading('Regional Details:')
  )

  # Combined view.
  chart = r1 & r2
  # chart.padding = {'left': 50, 'top': 350, 'right': 50, 'bottom': 350}

  if (preview):
    chart.display()

  return chart.to_json()

# Uncomment the line below to test.
# create_shipper_customer_view(preview=True)