# -*- coding: utf-8 -*-
"""otd_page2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v97jw1x0MrKteSEDWBOlu6crlvE9vAI-

## Imports & Inits
"""

# Assume altair-5 is already installed. If not, run this command:
# !pip install altair==5

import altair as alt
import numpy as np
import pandas as pd
import os
import sys

print(alt.__version__)

# Enable large dataset.
alt.data_transformers.disable_max_rows()

# Setup base dir.
BASE_DIR=os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])),'w209')

# Special setup if this script is running in colab.
IN_COLAB = 'google.colab' in sys.modules
if (IN_COLAB):
  from google.colab import drive
  drive.mount('/content/drive')
  BASE_DIR = '/content/drive/MyDrive/Colab Notebooks/datasci-209/final-project'

# Setup frequently-used directories.
DATA_DIR=os.path.join(BASE_DIR, 'static')
LIB_DIR=os.path.join(BASE_DIR, 'lib')

# Include the lib dir in the module-search path.
sys.path.append(LIB_DIR)

# Import utilities library.
from otd_utils import selectable_legend,selectable_bar,radio_selection,dropdown_selection,global_styles,title_styles_heading,title_styles_footer

"""## EDA
- Actual EDA works are done in Final-Project_Delivery-Status_EDA notebook.
- Please refer to the details in that notebook.
- The current notebook is only resposible of loading the dataset from the data file created in the EDA notebook.
- This will make the current notebook clean and improve performance.
"""

def load_data(year=2015):
  # Load aggregation-specific dataset.
  agg_df = pd.read_csv(os.path.join(DATA_DIR,'DataCoSupplyChainDataset_DS_AGG.csv'),encoding='unicode_escape')

  # Uncomment below to inspect the dataframe.
  # pd.set_option('display.max_columns',None)
  # display(agg_df.head())
  # display(agg_df.shape)

  return agg_df[ agg_df['Order Year'] == year ]

"""## Build Views: Page-2

### Viz-2.1: Order Attributues View
"""

def create_filters(agg_df):
  # Get field options from dataset.
  market_opts = sorted(agg_df['Market'].unique())
  order_regions_opts = sorted(agg_df['Order Region'].unique())
  cust_country_opts = sorted(agg_df['Customer Country'].unique())
  cust_state_opts = sorted(agg_df['Customer State'].unique())

  # Define Filters.
  filters = {
    'market_sel': radio_selection('Market', market_opts),
    'order_regions_sel': dropdown_selection('Order Region', order_regions_opts),
    'cust_country_sel': radio_selection('Customer Country', cust_country_opts),
    'cust_state_sel': dropdown_selection('Customer State', cust_state_opts),
  }

  return filters

# Create order attributes view.
def create_shipper_customer_order_attributes_view(agg_df, legend, preview=False):
  filters = create_filters(agg_df)
  filter_list = list(filters.values())

  # Define attribute names to be projected.
  proj_names = [
      'Type', 'Delivery Status', 'Order Status',
      # 'Category Name', 'Product Name',
      'Department Name',
  ]

  plots = {}
  for p in proj_names:
    # plt = labeled_pct_bar(agg_df, f'{p}:N', 'Delivery Status:N')
    plt_obj = selectable_bar(agg_df, [],f'{p}:N', legend=legend)

    plt = plt_obj['plot']
    plt = plt.add_params(*filter_list)
    for f in filter_list: plt = plt.transform_filter(f)
    plots[p] = plt

  if (preview):
    (plots['Type'] | plots['Order Status'] | plots['Delivery Status'] | plots['Department Name']).display()

  return plots

"""### Page-2: Order Attributes View"""

def create_order_attributes_view(year=2015, preview=False):
  # Load data.
  agg_df = load_data(year)

  # Create a common legend.
  legend = selectable_legend(agg_df, 'Delivery Status:N')
  # legend['plot'] # Uncomment to test.

  # Create order attributes view.
  plots = create_shipper_customer_order_attributes_view(agg_df, legend)

  # Create sub views.
  col1 = (plots['Type'] & plots['Order Status'])
  col2 = (plots['Delivery Status'] & plots['Department Name'])
  col3 = legend['plot']

  # Set footers.
  col1 = col1.properties(
    title=title_styles_footer([' ', ' ', ' ',
        'Use widget below to filter data by shipper or customer regions.',
        "Select 'All' to see all data under that field.",
    ])
  )
  col2 = col2.properties(
    title=title_styles_footer(global_styles['filter-notes'])
  )

  # Combine views.
  chart = col1 | col2 | col3
  chart = chart.properties(
  title = title_styles_heading(
      'Total Delivery Status Percentages',
      ['By Key Order Attributes'], center=True)
  )

  if (preview):
    chart.display()

  return chart.to_json()

"""## Unit Tests"""

def __test_selectable_legend():
  agg_df = load_data()
  legend = selectable_legend(agg_df, 'Delivery Status:N')
  legend['plot'].display()

# __test_selectable_legend()

def __test_create_shipper_customer_order_attributes_view():
  agg_df = load_data()
  legend = selectable_legend(agg_df, 'Delivery Status:N')
  create_shipper_customer_order_attributes_view(agg_df, legend, preview=True)

# __test_create_shipper_customer_order_attributes_view()

def __test_create_order_attributes_view():
  create_order_attributes_view(preview=True)

# __test_create_order_attributes_view()

# Customize filter widgets - To update in server, modify chart.html
# from IPython.display import HTML
# display(HTML("""
# <style>
# .vega-bind {
#   text-align:left;
#   padding:8px;
#   font-family:Arial;
# }
# .vega-bind-name {
#   padding-right:5px;
# }
# </style>
# """))

# Uncomment the line below to test.
# create_order_attributes_view(preview=True)